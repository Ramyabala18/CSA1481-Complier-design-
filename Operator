#include<stdio.h> 
#include<conio.h> 
int main()
{
	char s[5];
	printf("\n Enter any operator:"); 
	gets(s);
	switch(s[0])
	{
		case'>': 
			if(s[1]=='=')
				printf("\n Greater than or equal"); 
			else
				printf("\n Greater than"); 
			break;
		case'<': 
			if(s[1]=='=')
				printf("\n Less than or equal"); 
			else
				printf("\nLess than"); 
			break;
		case'=': 
			if(s[1]=='=') 
				printf("\nEqual to");
			else 
				printf("\nAssignment"); 
			break; 
		case'!': 
			if(s[1]=='=')
				printf("\nNot Equal"); 
			else
				printf("\n Bit Not"); 
			break;
		case'&': 
			if(s[1]=='&')
				printf("\nLogical AND"); 
			else
				printf("\n Bitwise AND"); 
			break;
		case'|': 
			if(s[1]=='|') 
				printf("\nLogical OR"); 
			else
				printf("\nBitwise OR"); 
			break;
		case'+': 
			printf("\n Addition"); 
			break;
		case'-': 
			printf("\nSubstraction"); 
			break;
		case'*': 
			printf("\nMultiplication"); 
			break;
		case'/':	
			printf("\nDivision");
			break;
		case'%': 
			printf("Modulus"); 
			break;
		default: 
			printf("\n Not a operator");
	}
}

Output:
Enter any operator:<=
 Less than or equal

Exp. No. 5                            
Design a lexical Analyzer to find the number of whitespaces and newline characters using C.

Program:
#include <stdio.h>
int main()
{
    char str[100];//input string with size 100

    int words=0,newline=0,characters=0; // counter variables

    scanf("%[^~]",&str);//scanf formatting    

    for(int i=0;str[i]!='\0';i++)
     { 
         if(str[i] == ' ')
         { 
              words++;
         }
         else if(str[i] == '\n')
         {
             newline++;
              words++;//since with every next line new words start. corner case 1
         }
         else if(str[i] != ' ' && str[i] != '\n'){
         characters++;
         }
     }
    if(characters > 0)//Corner case 2,3.
    {
        words++;
        newline++;
    }
     printf("Total number of words : %d\n",words);
     printf("Total number of lines : %d\n",newline);
     printf("Total number of characters : %d\n",characters);
    return 0;
}
